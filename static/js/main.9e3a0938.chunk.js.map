{"version":3,"sources":["components/App.js","index.js"],"names":["geoCode","lat","lng","Promise","resolve","reject","platform","window","H","service","Platform","reverseGeocodingParameters","prox","mode","maxresults","getGeocodingService","reverseGeocode","result","location","Response","View","Result","Location","Address","e","alert","App","props","state","items","dropHandler","bind","dragOverHandler","ev","preventDefault","dataTransfer","geoCodePromises","i","length","file","getAsFile","kind","text","then","response","JSON","parse","push","Latitude","Longitude","all","res","setState","map","item","index","address","Label","files","console","log","name","event","className","id","onDrop","onDragOver","this","Name","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAEMA,EAAU,SAACC,EAAKC,GACpB,OAAO,IAAIC,SAAS,SAACC,EAASC,GAE5B,IAAIC,EAAW,IAAIC,OAAOC,EAAEC,QAAQC,SAAS,CAC3C,OAAU,gDAIRC,EAA6B,CAC7BC,KAAK,GAAD,OAAKX,EAAL,YAAYC,GAChBW,KAAM,oBACNC,WAAY,GAUDR,EAASS,sBAEfC,eACPL,GATF,SAAmBM,GACjB,IAAIC,EAAWD,EAAOE,SAASC,KAAK,GAAGC,OAAO,GAC9C,OAAOjB,EAAQc,EAASI,SAASC,YASjC,SAASC,GAEP,OADAC,MAAMD,GACCnB,EAAOmB,UAmFPE,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAGT,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBARN,E,wDAWPE,GAAK,IAAD,OAEd,GADAA,EAAGC,iBACCD,EAAGE,aAAaN,OAAQ,WAI1B,IAHA,IAAIO,EAAkB,GAGbC,EAAI,EAAGA,EAAIJ,EAAGE,aAAaN,MAAMS,OAAQD,IAAK,CACrD,IAAIE,EAAON,EAAGE,aAAaN,MAAMQ,GAAGG,YAEE,SAAlCP,EAAGE,aAAaN,MAAMQ,GAAGI,MAC3BF,EAAKG,OACFC,MAAK,SAACC,GAEL,IADA,IAAMf,EAAQgB,KAAKC,MAAMF,GAChBP,EAAI,EAAGA,EAAGR,EAAMS,OAAQD,IAC/BD,EAAgBW,KAAK/C,EAAQ6B,EAAMQ,GAAGW,SAAUnB,EAAMQ,GAAGY,YAE3D9C,QAAQ+C,IAAId,GAAiBO,MAAK,SAACQ,GAEjC,EAAKC,SAAS,CACZvB,MAAOA,EAAMwB,KAAI,SAACC,EAAMC,GACtB,OAAO,2BACFD,GADL,IAEEE,QAASL,EAAII,GAAOE,oBApBV,QA8B1B,IAAK,IAAIpB,EAAI,EAAGA,EAAIJ,EAAGE,aAAauB,MAAMpB,OAAQD,IAChDsB,QAAQC,IAAI,YAAcvB,EAAI,YAAcJ,EAAGE,aAAauB,MAAMrB,GAAGwB,Q,sCAK3DC,GACdA,EAAM5B,mB,+BAGE,IAAD,OACP,OAAO,uBAAM6B,UAAU,MAAhB,UACL,qBACEC,GAAG,YACHC,OAAQ,SAACH,GAAD,OAAW,EAAKhC,YAAYgC,IACpCI,WAAY,SAACJ,GAAD,OAAW,EAAK9B,gBAAgB8B,IAC5CC,UAAU,YAJZ,iCAOCI,KAAKvC,MAAMC,MAAMS,OAAS,EAAI6B,KAAKvC,MAAMC,MAAMwB,KAAI,SAACC,GACnD,OACE,gCACE,6BAAKA,EAAKc,OACV,6BAAKd,EAAKN,WACV,6BAAKM,EAAKL,YACV,4BAAIK,EAAKE,YAJDF,EAAKc,SAOd,Y,GAxEOC,IAAMC,WC/BxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9e3a0938.chunk.js","sourcesContent":["import React from 'react';\n\nconst geoCode = (lat, lng) => {\n  return new Promise ((resolve, reject) => {\n    // Instantiate a map and platform object:\n    let platform = new window.H.service.Platform({\n      'apikey': 'Swhnjo3c30WglQoyLs1CSt0cTbfUC2HqEzV6LjYOGPQ',\n    });\n\n    // Create the parameters for the reverse geocoding request:\n    let reverseGeocodingParameters = {\n        prox: `${lat},${lng}`,\n        mode: 'retrieveAddresses',\n        maxresults: 1\n      };\n\n    // Define a callback function to process the response:\n    function onSuccess(result) {\n      let location = result.Response.View[0].Result[0];\n      return resolve(location.Location.Address)\n    };\n\n    // Get an instance of the geocoding service:\n    let geocoder = platform.getGeocodingService();\n\n    geocoder.reverseGeocode(\n      reverseGeocodingParameters,\n      onSuccess,\n      function(e) { \n        alert(e);\n        return reject(e)\n      });\n    })\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      items: []\n    }\n\n    this.dropHandler = this.dropHandler.bind(this)\n    this.dragOverHandler = this.dragOverHandler.bind(this)\n  }\n\n  dropHandler(ev) {\n    ev.preventDefault()\n    if (ev.dataTransfer.items) {\n      let geoCodePromises = []\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop#process_the_drop\n      // Use DataTransferItemList interface to access the file(s)\n      for (let i = 0; i < ev.dataTransfer.items.length; i++) {\n        let file = ev.dataTransfer.items[i].getAsFile();\n        // If dropped items aren't files, reject them\n        if (ev.dataTransfer.items[i].kind === 'file') {\n          file.text()\n            .then((response) => {\n              const items = JSON.parse(response)\n              for (let i = 0; i <items.length; i++) {\n                geoCodePromises.push(geoCode(items[i].Latitude, items[i].Longitude))\n              }\n              Promise.all(geoCodePromises).then((res) => {\n                // append address to items \n                this.setState({\n                  items: items.map((item, index) => {\n                    return {\n                      ...item,\n                      address: res[index].Label\n                    }\n                  })\n                })\n              })\n            })\n        }\n      }\n    } else {\n      // Use DataTransfer interface to access the file(s)\n      for (let i = 0; i < ev.dataTransfer.files.length; i++) {\n        console.log('... file[' + i + '].name = ' + ev.dataTransfer.files[i].name);\n      }\n    }\n  }\n\n  dragOverHandler(event) {\n    event.preventDefault()\n  }\n\n  render() {\n    return <main className=\"App\">\n      <div \n        id=\"drop_zone\"\n        onDrop={(event) => this.dropHandler(event)}\n        onDragOver={(event) => this.dragOverHandler(event)}\n        className=\"drag-area\">\n        Drop a file here...\n      </div>\n      {this.state.items.length > 0 ? this.state.items.map((item) => {\n        return (\n          <div key={item.Name}>\n            <h1>{item.Name}</h1>\n            <h2>{item.Latitude}</h2>\n            <h2>{item.Longitude}</h2>\n            <p>{item.address}</p>\n          </div>\n        )\n      }) : null}\n    </main>\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}